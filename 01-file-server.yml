---
- name: Configure file server
  hosts: file_server
  become: true  # Run with sudo privileges
  vars_prompt:
    - name: "ssh_key_passphrase"
      prompt: "Enter SSH key passphrase for user michael (leave blank for no passphrase)"
      private: yes

  tasks:
    - name: Create required directories (excluding Btrfs-managed paths)
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /srv/nvme  # Base for NVMe subvolumes
        - /srv/hdd   # Base for HDD subvolumes
        - /srv/nfs   # Base for NFS bind mounts
        - /srv/nfs/backup
        - /srv/nfs/infra-server
        - /srv/nfs/container-server
        - /srv/nfs/nextcloud-server
        - /srv/nfs/srv_pbs_important
        - /srv/nfs/pbs_test
        - /srv/nfs/ncbackup
        - /srv/nfs/pihole-clients
        - /srv/nfs/pihole-servers
        - /srv/nfs/iso
        - /srv/nfs/container-images

    - name: Mount Btrfs subvolumes (NVMe U.2 Drive)
      ansible.builtin.mount:
        path: "{{ item.path }}"
        src: "UUID=19583b5d-8c79-4f16-b902-153124679f5e"
        fstype: btrfs
        opts: "{{ item.opts }}"
        state: mounted
      loop:
        - { path: "/srv/nvme", opts: "subvol=@srv_nvme,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/backup", opts: "subvol=@srv_nvme_backup,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/infra-server", opts: "subvol=@srv_nvme_infra-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/container-server", opts: "subvol=@srv_nvme_container-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/nextcloud-server", opts: "subvol=@srv_nvme_nextcloud-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/ncbackup", opts: "subvol=@srv_nvme_ncbackup,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/pihole-clients", opts: "subvol=@srv_nvme_pihole-clients,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/pihole-servers", opts: "subvol=@srv_nvme_pihole-servers,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/iso", opts: "subvol=@srv_nvme_iso,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/container-images", opts: "subvol=@srv_nvme_container-images,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }

    - name: Mount Btrfs subvolumes (HDD RAID10 Drive)
      ansible.builtin.mount:
        path: "{{ item.path }}"
        src: "UUID=c3c23dbc-7f0a-427c-9a3f-2462a3dc1e5c"
        fstype: btrfs
        opts: "{{ item.opts }}"
        state: mounted
      loop:
        - { path: "/srv/hdd", opts: "subvol=@srv_hdd,noatime,nodev,nosuid,noexec,compress-force=zstd:6,autodefrag,space_cache=v2,nossd" }
        - { path: "/srv/hdd/backup", opts: "subvol=@srv_hdd_backup,noatime,nodev,nosuid,noexec,compress-force=zstd:6,autodefrag,space_cache=v2,nossd" }
        - { path: "/srv/hdd/pbs_important", opts: "subvol=@srv_pbs_important,noatime,nodev,nosuid,noexec,compress-force=zstd:6,autodefrag,space_cache=v2,nossd" }
        - { path: "/srv/hdd/pbs_test", opts: "subvol=@srv_pbs_test,noatime,nodev,nosuid,noexec,compress-force=zstd:6,autodefrag,space_cache=v2,nossd" }

    - name: Mount Btrfs root partitions
      ansible.builtin.mount:
        path: "{{ item.path }}"
        src: "UUID={{ item.uuid }}"
        fstype: btrfs
        opts: "defaults"
        state: mounted
      loop:
        - { path: "/srv/nvme/btrfsroot", uuid: "19583b5d-8c79-4f16-b902-153124679f5e", opts: "noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/hdd/btrfsroot", uuid: "c3c23dbc-7f0a-427c-9a3f-2462a3dc1e5c", opts: "noatime,nodev,nosuid,noexec,compress-force=zstd:6,autodefrag,space_cache=v2,nossd" }
        
    - name: Bind mount directories
      ansible.builtin.mount:
        path: "{{ item.dest }}"
        src: "{{ item.src }}"
        fstype: none
        opts: "bind"
        state: mounted
      loop:
        - { src: "/srv/nvme/backup", dest: "/srv/nfs/backup" }
        - { src: "/srv/nvme/container-server", dest: "/srv/nfs/container-server" }
        - { src: "/srv/nvme/infra-server", dest: "/srv/nfs/infra-server" }
        - { src: "/srv/nvme/nextcloud-server", dest: "/srv/nfs/nextcloud-server" }
        - { src: "/srv/nvme/ncbackup", dest: "/srv/nfs/ncbackup" }
        - { src: "/srv/hdd/pbs_important", dest: "/srv/nfs/pbs_important"}
        - { src: "/srv/hdd/pbs_test", dest: "/srv/nfs/pbs_test"}
        - { src: "/srv/nvme/pihole-clients", dest: "/srv/nfs/pihole-clients"}
        - { src: "/srv/nvme/pihole-servers", dest: "/srv/nfs/pihole-servers"}
        - { src: "/srv/nvme/iso", dest: "/srv/nfs/iso"}

    - name: Ensure all mounts are persistent in /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "{{ item }}"
        state: present
      loop:
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme btrfs subvol=@srv_nvme,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/backup btrfs subvol=@srv_nvme_backup,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/container-server btrfs subvol=@srv_nvme_container-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/infra-server btrfs subvol=@srv_nvme_infra-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/nextcloud-server btrfs subvol=@srv_nvme_nextcloud-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/ncbackup btrfs subvol=@srv_nvme_ncbackup,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/pihole-clients btrfs subvol=@srv_nvme_pihole-clients,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/pihole-servers btrfs subvol=@srv_nvme_pihole-servers,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/iso btrfs subvol=@srv_nvme_iso,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/container-images btrfs subvol=@srv_nvme_iso,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=c3c23dbc-7f0a-427c-9a3f-2462a3dc1e5c /srv/hdd btrfs subvol=@srv_hdd,noatime,nodev,nosuid,noexec,compress-force=zstd:6,autodefrag,space_cache=v2,nossd 0 0"
        - "UUID=c3c23dbc-7f0a-427c-9a3f-2462a3dc1e5c /srv/hdd/backup btrfs subvol=@srv_hdd_backup,noatime,nodev,nosuid,noexec,compress-force=zstd:6,autodefrag,space_cache=v2,nossd 0 0"
        - "UUID=c3c23dbc-7f0a-427c-9a3f-2462a3dc1e5c /srv/hdd/pbs_important btrfs subvol=@srv_pbs_important,noatime,nodev,nosuid,noexec,compress-force=zstd:6,autodefrag,space_cache=v2,nossd 0 0"
        - "UUID=c3c23dbc-7f0a-427c-9a3f-2462a3dc1e5c /srv/hdd/pbs_test btrfs subvol=@srv_pbs_test,noatime,nodev,nosuid,noexec,compress-force=zstd:6,autodefrag,space_cache=v2,nossd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/btrfsroot btrfs noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=c3c23dbc-7f0a-427c-9a3f-2462a3dc1e5c /srv/hdd/btrfsroot btrfs noatime,nodev,nosuid,noexec,compress-force=zstd:6,autodefrag,space_cache=v2,nossd 0 0"
        - "/srv/nvme/backup /srv/nfs/backup none bind 0 0"
        - "/srv/nvme/container-server /srv/nfs/container-server none bind 0 0"
        - "/srv/nvme/infra-server /srv/nfs/infra-server none bind 0 0"
        - "/srv/nvme/nextcloud-server /srv/nfs/nextcloud-server none bind 0 0"
        - "/srv/hdd/pbs_important /srv/nfs/pbs_important none bind 0 0"
        - "/srv/hdd/pbs_test /srv/nfs/pbs_test none bind 0 0"
        - "/srv/nvme/ncbackup /srv/nfs/ncbackup none bind 0 0"
        - "/srv/nvme/pihole-clients /srv/nfs/pihole-clients none bind 0 0"
        - "/srv/nvme/pihole-servers /srv/nfs/pihole-servers none bind 0 0"
        - "/srv/nvme/iso /srv/nfs/iso none bind 0 0"
        - "/srv/nvme/container-images /srv/nfs/container-images none bind 0 0"
       
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - nfs-kernel-server
          - firewalld
          - git
          - rsync
          - fastfetch
        state: present
        update_cache: yes

    - name: Ensure Firewalld is running and enabled
      ansible.builtin.systemd:
        name: firewalld
        enabled: yes
        state: started

    - name: Check existing Firewalld zones
      ansible.builtin.command: "firewall-cmd --get-zones"
      register: firewalld_existing_zones
      changed_when: false

    - name: Create Firewalld zones if missing
      ansible.builtin.firewalld:
        zone: "{{ item }}"
        permanent: yes
        state: present
      loop:
        - servers
        - 10G
        - pve-host
        - nextcloud
        - infra
        - containers
      when: "item not in firewalld_existing_zones.stdout"

    - name: Reload Firewalld to apply new zones
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"
      changed_when: false 
       
    - name: Bind interfaces to Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        interface: "{{ item.interface }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", interface: "eth0" }
        - { zone: "10G", interface: "eth1" }
        - { zone: "pve-host", interface: "eth2" }
        - { zone: "nextcloud", interface: "eth3" }
        - { zone: "infra", interface: "eth4" }
        - { zone: "containers", interface: "eth5" }

    - name: Allow required services in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        service: "{{ item.service }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", service: "ssh" }
        - { zone: "servers", service: "nfs" }
        - { zone: "servers", service: "mountd" }
        - { zone: "servers", service: "rpc-bind" }
        - { zone: "10G", service: "nfs" }
        - { zone: "10G", service: "mountd" }
        - { zone: "10G", service: "rpc-bind" }
        - { zone: "pve-host", service: "nfs" }
        - { zone: "pve-host", service: "mountd" }
        - { zone: "pve-host", service: "rpc-bind" }
        - { zone: "nextcloud", service: "nfs" }
        - { zone: "nextcloud", service: "mountd" }
        - { zone: "nextcloud", service: "rpc-bind" }
        - { zone: "infra", service: "nfs" }
        - { zone: "infra", service: "mountd" }
        - { zone: "infra", service: "rpc-bind" }
        - { zone: "containers", service: "nfs" }
        - { zone: "containers", service: "mountd" }
        - { zone: "containers", service: "rpc-bind" }

    - name: Open required ports in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        port: "{{ item.port }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", port: "32767/tcp" }
        - { zone: "servers", port: "32767/udp" }
        - { zone: "servers", port: "32765/tcp" }
        - { zone: "servers", port: "32765/udp" }
        - { zone: "10G", port: "32767/tcp" }
        - { zone: "10G", port: "32767/udp" }
        - { zone: "10G", port: "32765/tcp" }
        - { zone: "10G", port: "32765/udp" }
        - { zone: "pve-host", port: "32767/tcp" }
        - { zone: "pve-host", port: "32767/udp" }
        - { zone: "pve-host", port: "32765/tcp" }
        - { zone: "pve-host", port: "32765/udp" }
        - { zone: "nextcloud", port: "32767/tcp" }
        - { zone: "nextcloud", port: "32767/udp" }
        - { zone: "nextcloud", port: "32765/tcp" }
        - { zone: "nextcloud", port: "32765/udp" }
        - { zone: "infra", port: "32767/tcp" }
        - { zone: "infra", port: "32767/udp" }
        - { zone: "infra", port: "32765/tcp" }
        - { zone: "infra", port: "32765/udp" }
        - { zone: "containers", port: "32767/tcp" }
        - { zone: "containers", port: "32767/udp" }
        - { zone: "containers", port: "32765/tcp" }
        - { zone: "containers", port: "32765/udp" }

    - name: Reload Firewalld to apply changes
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"

    - name: Check if SSH private key exists for user michael
      ansible.builtin.stat:
        path: /home/michael/.ssh/id_rsa
      register: michael_ssh_key

    - name: Create .ssh directory for michael (if needed)
      file:
        path: /home/michael/.ssh
        state: directory
        owner: michael
        group: michael
        mode: '0700'

    - name: Generate SSH key for michael if it doesn't exist
      become_user: michael
      community.crypto.openssh_keypair:
        path: /home/michael/.ssh/id_rsa
        type: rsa
        size: 4096
        passphrase: "{{ ssh_key_passphrase }}"
        comment: "michael@{{ inventory_hostname }}"
      when: not michael_ssh_key.stat.exists

    - name: Read public SSH key
      slurp:
        src: /home/michael/.ssh/id_rsa.pub
      register: michael_public_key
      become_user: michael

    - name: Display public SSH key for michael
      debug:
        msg: "{{ michael_public_key.content | b64decode }}"

    - name: Create /home/michael/build directory with proper ownership
      file:
        path: /home/michael/build
        state: directory
        owner: michael
        group: michael
        mode: '0755'

    - name: Ensure aliases are present in .bashrc for root and michael
      ansible.builtin.lineinfile:
        path: "{{ item.bashrc }}"
        line: "{{ item.alias }}"
        create: yes
        owner: "{{ item.user }}"
        group: "{{ item.user }}"
        mode: '0644'
        insertafter: EOF
      loop:
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias gs='git status'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias c='clear'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias h='history'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias ls='ls -alh --color=auto" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias df='df -h'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias ports='ss -tulpn''" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias gs='git status'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias c='clear'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias h='history'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias ls='ls -alh --color=auto'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias df='df -h'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias ports='ss -tulpn'" }
    
    - name: Ensure NFS service is running and enabled
      ansible.builtin.systemd:
        name: nfs-server
        enabled: yes
        state: started

    - name: Define NFS exports
      ansible.builtin.blockinfile:
        path: /etc/exports
        block: |
          /srv/nfs/backup 10.10.112.0/24(rw,sync,no_subtree_check,no_root_squash)
          /srv/nfs/infra-server 10.14.112.40(rw,sync,no_subtree_check,no_root_squash)
          /srv/nfs/nextcloud-server 10.13.112.41(rw,sync,no_subtree_check,no_root_squash)
          /srv/nfs/ncbackup 10.13.112.41(rw,sync,no_subtree_check,no_root_squash)
          /srv/nfs/pbs_important 10.14.112.40(rw,sync,no_subtree_check,no_root_squash)
          /srv/nfs/pbs_test 10.14.112.40(rw,sync,no_subtree_check,no_root_squash)
          /srv/nfs/container-server 10.15.112.42(rw,sync,no_subtree_check,no_root_squash)
          /srv/nfs 10.12.112.10(rw,sync,no_subtree_check,no_root_squash)
          /srv/nfs/pihole-clients 10.10.112.30(rw,sync,no_subtree_check,no_root_squash)
          /srv/nfs/pihole-servers 10.10.112.31(rw,sync,no_subtree_check,no_root_squash)
          /srv/nfs/iso 10.10.112.10(rw,sync,no_subtree_check,no_root_squash)
          /srv/nfs/container-images 10.10.112.50(rw,sync,no_subtree_check,no_root_squash)
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
      notify: Restart NFS

    - name: Export NFS shares
      ansible.builtin.command: exportfs -ra
      changed_when: false

    - name: Set fixed ports for NFS services in /etc/nfs.conf
      ansible.builtin.blockinfile:
        path: /etc/nfs.conf
        marker: "# {mark} ANSIBLE MANAGED NFS PORTS"
        block: |
          [mountd]
          port=20048

          [lockd]
          port=32767
          udp-port=32767

          [statd]
          port=32765
          udp-port=32765
      notify: Restart NFS

  handlers:
    - name: Restart NFS
      ansible.builtin.systemd:
        name: nfs-server
        state: restarted



