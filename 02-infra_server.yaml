- name: Install infra-server
  hosts: infra_server
  become: yes
  tasks:

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - htop
          - iotop
          - strace
          - lsof
          - mc
          - firewalld
          - nfs-utils
          - podman
          - auditd
          - apparmor-utils
          - apparmor-profiles
        state: present
        update_cache: yes

    - name: Ensure Firewalld is running and enabled
      ansible.builtin.systemd:
        name: firewalld
        enabled: yes
        state: started

    - name: Check existing Firewalld zones
      ansible.builtin.command: "firewall-cmd --get-zones"
      register: firewalld_existing_zones
      changed_when: false

    - name: Create Firewalld zones if missing
      ansible.builtin.firewalld:
        zone: "{{ item }}"
        permanent: yes
        state: present
      loop:
        - servers
        - 10G
        - file-server
        - containers
      when: "item not in firewalld_existing_zones.stdout"

    - name: Reload Firewalld to apply new zones
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"
      changed_when: false 
       
    - name: Bind interfaces to Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        interface: "{{ item.interface }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", interface: "eth0" }
        - { zone: "10G", interface: "eth1" }
        - { zone: "file-server", interface: "eth3" }
        - { zone: "containers", interface: "eth2" }

    - name: Allow required services in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        service: "{{ item.service }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", service: "ssh" }
        - { zone: "servers", service: "dns" }
        - { zone: "servers", service: "dhcp" }
        - { zone: "servers", service: "ntp" }
        - { zone: "10G", service: "dns" }
        - { zone: "10G", service: "dhcp" }
        - { zone: "10G", service: "ntp" }
        
    - name: Open required ports in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        port: "{{ item.port }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "containers", port: "8080/tcp" }
        - { zone: "containers", port: "8081/tcp" }

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
    

    - name: Redirect port 53 to 8053 tcp (DNS pihole-servers)
      ansible.posix.firewalld:
        zone: servers
        forward_port:
          port: 53
          protocol: tcp
          to_port: 8053
          to_addr: ""
        permanent: yes
        immediate: yes
        state: enabled
    
    - name: Redirect port 53 to 8053 udp (DNS pihole-servers)
      ansible.posix.firewalld:
        zone: servers
        forward_port:
          port: 53
          protocol: udp
          to_port: 8053
          to_addr: ""
        permanent: yes
        immediate: yes
        state: enabled

    - name: Redirect port 67 to 8067 tcp (DHCP pihole-servers)
      ansible.posix.firewalld:
        zone: servers
        forward_port:
          port: 67
          protocol: tcp
          to_port: 8067
          to_addr: ""
        permanent: yes
        immediate: yes
        state: enabled

    - name: Redirect port 67 to 8067 udp (DHCP pihole-servers)
      ansible.posix.firewalld:
        zone: servers
        forward_port:
          port: 67
          protocol: udp
          to_port: 8067
          to_addr: ""
        permanent: yes
        immediate: yes
        state: enabled 

    - name: Redirect port 123 to 8123 udp (NTP pihole-servers)
      ansible.posix.firewalld:
        zone: servers
        forward_port:
          port: 123
          protocol: udp
          to_port: 8123
          to_addr: ""
        permanent: yes
        immediate: yes
        state: enabled 
    

    - name: Redirect port 53 to 8053 tcp (DNS pihole-clients)
      ansible.posix.firewalld:
        zone: 10G
        forward_port:
          port: 53
          protocol: tcp
          to_port: 8053
          to_addr: ""
        permanent: yes
        immediate: yes
        state: enabled

    - name: Redirect port 53 to 8053 udp (DNS pihole-clients)
      ansible.posix.firewalld:
        zone: 10G
        forward_port:
          port: 53
          protocol: udp
          to_port: 8053
          to_addr: ""
        permanent: yes
        immediate: yes
        state: enabled

    - name: Redirect port 67 to 8067 tcp (DHCP pihole-clients)
      ansible.posix.firewalld:
        zone: 10G
        forward_port:
          port: 67
          protocol: tcp
          to_port: 8067
          to_addr: ""
        permanent: yes
        immediate: yes
        state: enabled

    - name: Redirect port 67 to 8067 udp (DHCP pihole-clients)
      ansible.posix.firewalld:
        zone: 10G
        forward_port:
          port: 67
          protocol: udp
          to_port: 8067
          to_addr: ""
        permanent: yes
        immediate: yes
        state: enabled 

    - name: Redirect port 123 to 8123 udp (NTP pihole-clients)
      ansible.posix.firewalld:
        zone: 10G
        forward_port:
          port: 123
          protocol: udp
          to_port: 8123
          to_addr: ""
        permanent: yes
        immediate: yes
        state: enabled 
        

    - name: Reload Firewalld to apply changes
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"

    - name: Ensure user 'podman' exists with home directory and bash shell
      ansible.builtin.user:
        name: podman
        shell: /bin/bash
        home: /home/podman
        state: present
        create_home: true    

    - name: Mount NFS share for Podman
      ansible.posix.mount:
        path: /home/podman/data
        src: 10.14.112.20:/srv/nfs/infra-server
        fstype: nfs
        opts: noatime,_netdev,vers=4.2
        state: mounted

    - name: Ensure NFS mount is persistent in /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "10.14.112.20:/srv/nfs/infra-server /home/podman/data nfs noatime,_netdev,vers=4.2 0 0"
        state: present
    
    - name: Ensure podman owns the mounted NFS directory
      ansible.builtin.command: chown -R podman:podman /home/podman/data
      args:
        warn: false




