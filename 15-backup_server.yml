---
- name: Install Proxmox Backup Server (PBS) Community Edition
  hosts: backup_server
  become: yes

  vars:
    pbs_repo: "deb http://download.proxmox.com/debian/pbs bookworm pbs-no-subscription"

  tasks:

    - name: Disable Proxmox Backup Server enterprise repository
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/pbs-enterprise.list
        state: absent

    - name: Install required packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - curl
          - gnupg
          - btrfs-progs
          - htop
          - iotop
          - mc
          - nfs-kernel-server
          - firewalld
          - fail2ban
          - apt-listbugs
          - needrestart
          - debian-goodies
          - pam_cracklib         
        state: present
        update_cache: yes

    - name: Add Proxmox Backup Server repository key
      ansible.builtin.apt_key:
        url: https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg
        state: present

    - name: Add Proxmox Backup Server no-subscription repository
      ansible.builtin.apt_repository:
        repo: "{{ pbs_repo }}"
        state: present
        filename: proxmox-backup-server

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Proxmox Backup Server package
      ansible.builtin.apt:
        name: proxmox-backup-server
        state: present

    - name: Ensure PBS service is enabled and running
      ansible.builtin.systemd:
        name: proxmox-backup
        enabled: yes
        state: started

    - name: Check if enterprise-repo file exists
      ansible.builtin.stat:
        path: /etc/apt/sources.list.d/pbs-enterprise.list
      register: enterprise_list

    - name: Remove Proxmox Backup Server enterprise repository file
      ansible.builtin.file:
        path: /etc/apt/sources.list.d/pbs-enterprise.list
        state: absent

    - name: Comment out enterprise repo lines if file still exists
      ansible.builtin.replace:
        path: /etc/apt/sources.list.d/pbs-enterprise.list
        regexp: '^deb '
        replace: '# deb '
      when: enterprise_list.stat.exists

    - name: Retrieve list of existing datastores
      ansible.builtin.command:
        cmd: proxmox-backup-manager datastore list --output-format json
      register: pbm_datastores
      changed_when: false

    - name: Check for .chunks directory for pve-server
      ansible.builtin.stat:
        path: /srv/pbs/pve-server/.chunks
      register: chunks_pve_server

    - name: Remove incomplete '.chunks' for pve-server if datastore does not exist
      ansible.builtin.file:
        path: /srv/pbs/pve-server/.chunks
        state: absent
      when:
        - chunks_pve_server.stat.exists
        - >
          (pbm_datastores.stdout
           | from_json
           | selectattr('name','equalto','pve-server')
           | list
           | length) == 0

    - name: Register 'pve-server' datastore if missing
      ansible.builtin.command:
        cmd: proxmox-backup-manager datastore create pve-server /srv/pbs/pve-server
      when: >
        (pbm_datastores.stdout
         | from_json
         | selectattr('name','equalto','pve-server')
         | list
         | length) == 0

    - name: Check for .chunks directory for pve-workstation
      ansible.builtin.stat:
        path: /srv/pbs/pve-workstation/.chunks
      register: chunks_pve_workstation

    - name: Remove incomplete '.chunks' for pve-workstation if datastore does not exist
      ansible.builtin.file:
        path: /srv/pbs/pve-workstation/.chunks
        state: absent
      when:
        - chunks_pve_workstation.stat.exists
        - >
          (pbm_datastores.stdout
           | from_json
           | selectattr('name','equalto','pve-workstation')
           | list
           | length) == 0

    - name: Register 'pve-workstation' datastore if missing
      ansible.builtin.command:
        cmd: proxmox-backup-manager datastore create pve-workstation /srv/pbs/pve-workstation
      when: >
        (pbm_datastores.stdout
         | from_json
         | selectattr('name','equalto','pve-workstation')
         | list
         | length) == 0

    - name: Ensure Firewalld is running and enabled
      ansible.builtin.systemd:
        name: firewalld
        enabled: yes
        state: started

    - name: Check existing Firewalld zones
      ansible.builtin.command: "firewall-cmd --get-zones"
      register: firewalld_existing_zones
      changed_when: false

    - name: Create Firewalld zones if missing
      ansible.builtin.firewalld:
        zone: "{{ item }}"
        permanent: yes
        state: present
      loop:
        - servers
      when: "item not in firewalld_existing_zones.stdout"

    - name: Reload Firewalld to apply new zones
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"
      changed_when: false 
       
    - name: Bind interfaces to Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        interface: "{{ item.interface }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", interface: "eth0" }

    - name: Allow required services in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        service: "{{ item.service }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", service: "ssh" }
        - { zone: "servers", service: "nfs" }
        - { zone: "servers", service: "mountd" }
        - { zone: "servers", service: "rpc-bind" }
  
    - name: Open required ports in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        port: "{{ item.port }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", port: "32767/tcp" }
        - { zone: "servers", port: "32767/udp" }
        - { zone: "servers", port: "32765/tcp" }
        - { zone: "servers", port: "32765/udp" }
        - { zone: "servers", port: "8007/tcp" }

    - name: Reload Firewalld to apply changes
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"

    - name: Deploy SSH hardening drop-in
      copy:
        dest: /etc/ssh/sshd_config.d/90-hardening.conf
        owner: root
        group: root
        mode: '0644'
        content: |
          AddressFamily inet
          ListenAddress 10.10.112.15
          PermitRootLogin no
          PasswordAuthentication no
          ChallengeResponseAuthentication no
          UsePAM yes
          X11Forwarding no
          AllowTcpForwarding no
          ClientAliveInterval 300
          ClientAliveCountMax 2
          Banner /etc/issue.net
          Compression no
          LogLevel VERBOSE
          MaxSessions 2
          TCPKeepAlive no
          AllowAgentForwarding no
          # LoginGraceTime 30
          MaxAuthTries 3

    - name: Restart SSH to apply hardening
      service:
        name: ssh
        state: restarted

    - name: Deploy login warning banner for /etc/issue
      copy:
        dest: /etc/issue
        owner: root
        group: root
        mode: '0644'
        content: |
          +----------------------------------------------------+
          | This is a controlled access system. The activities |
          | on this system are monitored.                      |
          | Evidence of unauthorised activities may be         |
          | disclosed to the appropriate authorities.          |
          +----------------------------------------------------+

    - name: Deploy login warning banner for /etc/issue.net
      copy:
        dest: /etc/issue.net
        owner: root
        group: root
        mode: '0644'
        content: |
          +----------------------------------------------------+
          | This is a controlled access system. The activities |
          | on this system are monitored.                      |
          | Evidence of unauthorised activities may be         |
          | disclosed to the appropriate authorities.          |
          +----------------------------------------------------+

    - name: Deploy fail2ban jail config for SSH and Proxmox Backup Server
      copy:
        dest: /etc/fail2ban/jail.d/proxmox.conf
        owner: root
        group: root
        mode: '0644'
        content: |
          [sshd]
          enabled   = true
          port      = ssh
          filter    = sshd
          logpath   = /var/log/auth.log
          maxretry  = 5

          [proxmox-backup]
          enabled   = true
          port      = 8007
          filter    = proxmox-backup
          logpath   = /var/log/pveproxy/access.log
          maxretry  = 5

    - name: Deploy fail2ban filter for Proxmox Backup Server
      copy:
        dest: /etc/fail2ban/filter.d/proxmox-backup.conf
        owner: root
        group: root
        mode: '0644'
        content: |
          [Definition]
          # detect failed login attempts via the /access/ticket API
          failregex = <HOST> .* "(GET|POST) /api2/json/access/ticket.*"  # adjust if needed
          ignoreregex =

    - name: Ensure fail2ban is running
      service:
        name: fail2ban
        state: restarted
        enabled: yes

    - name: Preserve default fail2ban settings in jail.local
      shell: |
        cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
      args:
        creates: /etc/fail2ban/jail.local      

    - name: Set up bash aliases for users
      blockinfile:
        path: "{{ item.path }}"
        create: yes
        block: |-
          alias c='clear'
          alias h='history'
          alias ls='ls -alh --color=auto'
          alias df='df -h'
          alias ports='ss -tulpn'
      loop:
        - { path: /root/.bashrc }
        - { path: /home/michael/.bashrc, owner: michael, group: michael }
      loop_control:
        label: "{{ item.path }}"

    - name: Install AIDE package
      apt:
        name: aide
        state: present
        update_cache: yes

    - name: Deploy basic AIDE configuration
      copy:
        dest: /etc/aide/aide.conf
        owner: root
        group: root
        mode: '0644'
        content: |
          ############################################################
          # Sample AIDE configuration
          ############################################################
          database=file:/var/lib/aide/aide.db
          database_out=file:/var/lib/aide/aide.db.new
          gzip_dbout=yes

          # Define checksums and attributes
          R = p+i+n+u+g+s+m+S+acl+selinux+xattrs+sha512

          # Directories to monitor
          /etc       R
          /bin       R
          /sbin      R
          /usr/bin   R
          /usr/sbin  R
          /var/log   R

          # Exclude runtime files
          !/var/log/audit/*

          # End of rules

    - name: Initialize AIDE database
      become: yes
      command: /usr/bin/aide --init --config=/etc/aide/aide.conf
      args:
        creates: /var/lib/aide/aide.db.new

    - name: Move freshly initialized AIDE database into place
      become: yes
      command: mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
      args:
        creates: /var/lib/aide/aide.db

    - name: Schedule daily AIDE check at 6AM
      cron:
        name: "Daily AIDE check"
        minute: 0
        hour: 6
        user: root
        job: "/usr/bin/aide --config=/etc/aide/aide.conf --check"   
          