---
- name: Configure file server
  hosts: file_server
  become: true  # Run with sudo privileges
  
  vars_files:
    
    - group_vars/file_server/secrets.yml
    - group_vars/file_server/common.yml

  tasks:

    - name: Create required directories (excluding Btrfs-managed paths)
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /srv/nvme  # Base for NVMe subvolumes
        - /srv/nfs   # Base for NFS bind mounts
        - /srv/smb   # Base for SMB bind mounts
        - /srv/mnt   # Directory for NFS mounts
        - /srv/nfs/backup
        - /srv/nfs/iso
        - /srv/nfs/infra-server      
        - /srv/smb/michael

    - name: Mount Btrfs subvolumes (NVMe U.2 Drive)
      ansible.builtin.mount:
        path: "{{ item.path }}"
        src: "UUID=19583b5d-8c79-4f16-b902-153124679f5e"
        fstype: btrfs
        opts: "{{ item.opts }}"
        state: mounted
      loop:
        - { path: "/home", opts: "subvol=@home,noatime,nodev,nosuid,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme", opts: "subvol=@srv_nvme,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/backup", opts: "subvol=@srv_nvme_backup,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/michael", opts: "subvol=@srv_nvme_michael,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/infra-server", opts: "subvol=@srv_nvme_infra-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/iso", opts: "subvol=@srv_nvme_iso,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        
    - name: Mount Btrfs root NVMe U.2 Drive
      ansible.builtin.mount:
        path: "{{ item.path }}"
        src: "UUID={{ item.uuid }}"
        fstype: btrfs
        opts: "{{ item.opts }}"
        state: mounted
      loop:
        - { path: "/srv/nvme/btrfsroot", uuid: "19583b5d-8c79-4f16-b902-153124679f5e", opts: "noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }

    - name: Bind mount directories
      ansible.builtin.mount:
        path: "{{ item.dest }}"
        src: "{{ item.src }}"
        fstype: none
        opts: "bind"
        state: mounted
      loop:
        - { src: "/srv/nvme/backup", dest: "/srv/nfs/backup" }
        - { src: "/srv/nvme/iso", dest: "/srv/nfs/iso"}
        - { src: "/srv/nvme/michael", dest: "/srv/smb/michael"}
               
    - name: Ensure all mounts are persistent in /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "{{ item }}" 
        state: present
      loop:
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /home btrfs subvol=@home,noatime,nodev,nosuid,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme btrfs subvol=@srv_nvme,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/backup btrfs subvol=@srv_nvme_backup,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/michael btrfs subvol=@srv_nvme_michael,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/infra-server btrfs subvol=@srv_nvme_infra-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/iso btrfs subvol=@srv_nvme_iso,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/btrfsroot btrfs noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /home/podman/data/ncdata btrfs subvol=@srv_nvme_ncdata,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /home/podman/data/sabnzbd btrfs subvol=@srv_nvme_sabnzbd,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd"
        - "/srv/nvme/backup /srv/nfs/backup none bind 0 0"
        - "/srv/nvme/iso /srv/nfs/iso none bind 0 0"
        - "/srv/nvme/michael /srv/smb/michael none bind 0 0"

    - name: Install required packages
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - samba
          - smbclient
          - python3-samba
          - cifs-utils
          - htop
          - iotop
          - strace
          - lsof
          - mc
          - auditd
          - apparmor-utils
          - apparmor-profiles
          - nfs-kernel-server
          - btrfs-progs
          - firewalld
          - git
          - rsync
          - fastfetch
          - lynis
          - podman
          - podman-docker
          - auditd
          - apparmor-utils
          - apparmor-profiles
          - jq
          - unbound
          - bind9-dnsutils
          - systemd-zram-generator            
        state: present
        update_cache: yes
    
    - name: Create ZRAM configuration file
      copy:
        dest: /etc/systemd/zram-generator.conf
        content: |
          [zram0]
          zram-size = 8192MiB
          compression-algorithm = zstd
          swap-priority = 100

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Start and enable ZRAM swap
      ansible.builtin.systemd:
        name: swap-create@zram0.service
        enabled: yes
        state: started

    - name: Ensure Firewalld is running and enabled
      ansible.builtin.systemd:
        name: firewalld
        enabled: yes
        state: started

    - name: Check existing Firewalld zones
      ansible.builtin.command: "firewall-cmd --get-zones"
      register: firewalld_existing_zones
      changed_when: false

    - name: Create Firewalld zones if missing
      ansible.builtin.firewalld:
        zone: "{{ item }}"
        permanent: yes
        state: present
      loop:
        - servers
        - 10G
        - containers
        - nfs
        - smb
      when: "item not in firewalld_existing_zones.stdout"

    - name: Reload Firewalld to apply new zones
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"
      changed_when: false 
       
    - name: Bind interfaces to Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        interface: "{{ item.interface }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", interface: "eth0" }
        - { zone: "10G", interface: "eth1" }
        - { zone: "containers", interface: "eth2" }
        - { zone: "nfs", interface: "eth3" }
        - { zone: "smb", interface: "eth4" }
        
    - name: Allow required services in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        service: "{{ item.service }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", service: "ssh" }
        - { zone: "servers", service: "samba" }
        - { zone: "servers", service: "ssh" }
        - { zone: "servers", service: "dns" }
        - { zone: "servers", service: "dhcp" }
        - { zone: "servers", service: "ntp" }
        - { zone: "10G", service: "samba" }
        - { zone: "10G", service: "http" }
        - { zone: "10G", service: "https" }
        - { zone: "10G", service: "dns" }
        - { zone: "10G", service: "dhcp" }
        - { zone: "10G", service: "ntp" }
        - { zone: "nfs", service: "nfs" }
        - { zone: "nfs", service: "mountd" }
        - { zone: "nfs", service: "rpc-bind" }
        - { zone: "smb", service: "samba" }
        
    - name: Open required ports in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        port: "{{ item.port }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "nfs", port: "32767/tcp" }
        - { zone: "nfs", port: "32767/udp" }
        - { zone: "nfs", port: "32765/tcp" }
        - { zone: "nfs", port: "32765/udp" }
        - { zone: "containers", port: "8080/tcp" }
        - { zone: "containers", port: "8081/tcp" }
        - { zone: "containers", port: "8082/tcp" }
        - { zone: "containers", port: "8083/tcp" }

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      
    - name: Redirect common ports for rootless podman (rich rules)
      ansible.posix.firewalld:
        zone: "{{ item.zone }}"
        rich_rule: 'rule family="ipv4" forward-port port="{{ item.src_port }}" protocol="{{ item.protocol }}" to-port="{{ item.to_port }}"'
        permanent: yes
        immediate: yes
        state: enabled  
      loop:
        - { zone: "servers", src_port: 53,  protocol: "tcp", to_port: 8053 }
        - { zone: "servers", src_port: 53,  protocol: "udp", to_port: 8053 }
        - { zone: "servers", src_port: 67,  protocol: "tcp", to_port: 8067 }
        - { zone: "servers", src_port: 67,  protocol: "udp", to_port: 8067 }
        - { zone: "servers", src_port: 123, protocol: "udp", to_port: 8123 }
        - { zone: "10G",    src_port: 80,  protocol: "tcp", to_port: 8080 }        
        - { zone: "10G",    src_port: 443, protocol: "tcp", to_port: 8443 }
        - { zone: "10G",    src_port: 53,  protocol: "tcp", to_port: 8053 }
        - { zone: "10G",    src_port: 53,  protocol: "udp", to_port: 8053 }
        - { zone: "10G",    src_port: 67,  protocol: "tcp", to_port: 8067 }
        - { zone: "10G",    src_port: 67,  protocol: "udp", to_port: 8067 }
        - { zone: "10G",    src_port: 123, protocol: "udp", to_port: 8123 }
        
    - name: Reload Firewalld to apply changes
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"

    - name: Set michael’s Linux password
      ansible.builtin.user:
        name: michael
        password: "{{ michael_password | password_hash('sha512') }}"

    - name: Check if SSH private key exists for user michael
      ansible.builtin.stat:
        path: /home/michael/.ssh/id_rsa
      register: michael_ssh_key

    - name: Create .ssh directory for michael (if needed)
      file:
        path: /home/michael/.ssh
        state: directory
        owner: michael
        group: michael
        mode: '0700'

    - name: Generate SSH key for michael if it doesn't exist
      become_user: michael
      community.crypto.openssh_keypair:
        path: /home/michael/.ssh/id_rsa
        type: rsa
        size: 4096
        passphrase: "{{ ssh_key_passphrase }}"
        comment: "michael@{{ inventory_hostname }}"
      when: not michael_ssh_key.stat.exists

    - name: Read public SSH key
      slurp:
        src: /home/michael/.ssh/id_rsa.pub
      register: michael_public_key
      become_user: michael

    - name: Create /home/michael/build directory with proper ownership
      file:
        path: /home/michael/build
        state: directory
        owner: michael
        group: michael
        mode: '0755'

    - name: Ensure aliases are present in .bashrc for root
      ansible.builtin.lineinfile:
        path: "{{ item.bashrc }}"
        line: "{{ item.alias }}"
        create: yes
        owner: "{{ item.user }}"
        group: "{{ item.user }}"
        mode: '0644'
        insertafter: EOF
      loop:
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias gs='git status'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias c='clear'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias h='history'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias ls='ls -alh --color=auto'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias df='df -h'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias ports='ss -tulpn'" }

    - name: Make fastfetch run for every interactive shell
      become: true
      ansible.builtin.copy:
        dest: /etc/profile.d/fastfetch.sh
        owner: root
        group: root
        mode: '0755'
        content: |
          #!/bin/sh
          # only run in an interactive terminal
          if [ -t 1 ] && command -v fastfetch >/dev/null 2>&1; then
            fastfetch
          fi

    - name: Fetch latest Docker Compose release via GitHub API
      uri:
        url: https://api.github.com/repos/docker/compose/releases/latest
        return_content: yes
        status_code: 200
      register: compose_release
      retries: 3
      delay: 5
      until: compose_release.status == 200

    - name: Determine Docker Compose version (fallback if API fails)
      set_fact:
        compose_version: >-
          {{ compose_release.json.tag_name
             if (compose_release.json is defined and compose_release.json.tag_name is defined)
             else 'v2.18.1' }}

    - name: Ensure user 'podman' exists with a specific password
      ansible.builtin.user:
        name: podman
        shell: /bin/bash
        home: /home/podman
        
    - name: Set podman’s Linux password
      ansible.builtin.user:
        name: podman
        password: "{{ podman_password | password_hash('sha512') }}"
        
    - name: Ensure podman has authorized SSH key
      ansible.posix.authorized_key:
        user: podman
        state: present
        key: "{{ podman_ssh_pubkey }}"

    - name: Get podman user's UID
      command: id -u podman
      register: podman_uid_cmd
      changed_when: false

    - name: Set podman_uid fact
      set_fact:
        podman_uid: "{{ podman_uid_cmd.stdout }}"

    - name: Get podman user's GID
      ansible.builtin.command:
        cmd: "id -g podman"
      register: podman_gid_cmd
      changed_when: false

    - name: Set podman_gid fact
      ansible.builtin.set_fact:
        podman_gid: "{{ podman_gid_cmd.stdout }}"

    - name: Enable linger for podman user so socket survives reboot
      command: loginctl enable-linger podman

    - name: Ensure podman.socket is enabled and running for podman user
      ansible.builtin.command: >
        sudo -u podman env XDG_RUNTIME_DIR=/run/user/{{ podman_uid }}
        systemctl --user enable --now podman.socket

    - name: Ensure podman's bashrc exports DOCKER_HOST
      lineinfile:
        path: /home/podman/.bashrc
        line: 'export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock'
        create: yes
        owner: podman
        group: podman
        mode: '0644'

    - name: Mount Btrfs subvolumes for podman
      ansible.builtin.mount:
        path: "{{ item.path }}"
        src: "UUID=19583b5d-8c79-4f16-b902-153124679f5e"
        fstype: btrfs
        opts: "{{ item.opts }}"
        state: mounted
      loop:
        - { path: "/home/podman/data/ncdata", opts: "subvol=@srv_nvme_ncdata,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/home/podman/data/sabnzbd", opts: "subvol=@srv_nvme_sabnzbd,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
            
    - name: Ensure NFS service is running and enabled
      ansible.builtin.systemd:
        name: nfs-server
        enabled: yes
        state: started

    - name: Define NFS exports
      ansible.builtin.blockinfile:
        path: /etc/exports
        block: |
          /srv/nfs 10.12.112.50(rw,fsid=0,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }}) 10.12.112.55(rw,fsid=0,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }})
          /srv/nfs/iso 10.12.112.10(rw,fsid=1,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }}) 10.12.112.11(rw,fsid=1,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }})
          /srv/nfs/backup 10.12.112.0/24(rw,fsid=2,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }})
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
      notify: Restart NFS

    - name: Add Nobody-User in [Mapping]
      ansible.builtin.ini_file:
        path: /etc/idmapd.conf
        section: Mapping
        option: Nobody-User
        value: nobody
        backup: yes

    - name: Add Nobody-Group in [Mapping]
      ansible.builtin.ini_file:
        path: /etc/idmapd.conf
        section: Mapping
        option: Nobody-Group
        value: nobody
        backup: yes

    - name: Export NFS shares
      ansible.builtin.command: exportfs -ra
      changed_when: false

    - name: Set fixed ports for NFS services in /etc/nfs.conf
      ansible.builtin.blockinfile:
        path: /etc/nfs.conf
        marker: "# {mark} ANSIBLE MANAGED NFS PORTS"
        block: |
          [mountd]
          port=20048

          [lockd]
          port=32767
          udp-port=32767

          [statd]
          port=32765
          udp-port=32765
      notify: Restart NFS

    - name: Ensure michael is in the sambashare group
      ansible.builtin.user:
        name: michael
        groups: sambashare
        append: yes

    - name: Create Samba users for each share
      ansible.builtin.shell: |
        echo -e "{{ lookup('vars', item + '_smb_password') }}\n{{ lookup('vars', item + '_smb_password') }}" \
          | smbpasswd -s -a {{ item }}
      args:
        executable: /bin/bash
      loop:
        - michael

    - name: Ensure share directories have correct owner/group and mode
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
        recurse: no
      loop:
        - { path: "/srv/smb/michael",       owner: michael,  group: michael,  mode: "2770" }
        
    - name: Deploy custom smb.conf
      ansible.builtin.template:
        src: file_server_smb.conf.j2
        dest: /etc/samba/smb.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart Samba

    - name: Display public SSH key for michael
      debug:
        msg: "{{ michael_public_key.content | b64decode }}"

    - name: Reboot the server
      ansible.builtin.reboot:
        reboot_timeout: 600     # wait up to 10 minutes for reboot
        test_command: whoami    # command to verify SSH is back
      tags: reboot

    - name: Reset SSH connection after reboot
      meta: reset_connection
      tags: reboot  

  handlers:
    
    - name: Restart NFS
      ansible.builtin.systemd:
        name: nfs-server
        state: restarted

    - name: Restart Samba
      ansible.builtin.systemd:
        name: smbd
        state: restarted
        enabled: yes

    - name: Check docker-compose
      command: docker-compose version
      register: compose_check
      changed_when: false
      failed_when: compose_check.rc != 0




