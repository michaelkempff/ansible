---
- name: Configure file server
  hosts: file_server
  become: true  # Run with sudo privileges
  
  vars_files:
    
    - group_vars/file_server/secrets.yml
    - group_vars/file_server/common.yml

  tasks:

    - name: Create required directories (excluding Btrfs-managed paths)
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /srv/nvme  # Base for NVMe subvolumes
        - /srv/nfs   # Base for NFS bind mounts
        - /srv/smb   # Base for SMB bind mounts
        - /srv/mnt   # Directory for NFS mounts
        - /srv/nfs/backup
        - /srv/nfs/iso
        - /srv/nfs/infra-server      
        - /srv/nfs/container-server
        - /srv/nfs/nextcloud-server
        - /srv/smb/michael
        
    - name: Mount Btrfs subvolumes (NVMe U.2 Drive)
      ansible.builtin.mount:
        path: "{{ item.path }}"
        src: "UUID=19583b5d-8c79-4f16-b902-153124679f5e"
        fstype: btrfs
        opts: "{{ item.opts }}"
        state: mounted
      loop:
        - { path: "/srv/nvme", opts: "subvol=@srv_nvme,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/backup", opts: "subvol=@srv_nvme_backup,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/michael", opts: "subvol=@srv_nvme_michael,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/infra-server", opts: "subvol=@srv_nvme_infra-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/container-server", opts: "subvol=@srv_nvme_container-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/nextcloud-server", opts: "subvol=@srv_nvme_nextcloud-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        - { path: "/srv/nvme/iso", opts: "subvol=@srv_nvme_iso,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }
        
    - name: Mount Btrfs root NVMe U.2 Drive
      ansible.builtin.mount:
        path: "{{ item.path }}"
        src: "UUID={{ item.uuid }}"
        fstype: btrfs
        opts: "{{ item.opts }}"
        state: mounted
      loop:
        - { path: "/srv/nvme/btrfsroot", uuid: "19583b5d-8c79-4f16-b902-153124679f5e", opts: "noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd" }

    - name: Bind mount directories
      ansible.builtin.mount:
        path: "{{ item.dest }}"
        src: "{{ item.src }}"
        fstype: none
        opts: "bind"
        state: mounted
      loop:
        - { src: "/srv/nvme/backup", dest: "/srv/nfs/backup" }
        - { src: "/srv/nvme/iso", dest: "/srv/nfs/iso"}
        - { src: "/srv/nvme/michael", dest: "/srv/smb/michael"}
        - { src: "/srv/nvme/infra-server", dest: "/srv/nfs/infra-server"}
        - { src: "/srv/nvme/container-server", dest: "/srv/nfs/container-server"}
        - { src: "/srv/nvme/nextcloud-server", dest: "/srv/nfs/nextcloud-server"}
        
    - name: Ensure all mounts are persistent in /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "{{ item }}"
        state: present
      loop:
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme btrfs subvol=@srv_nvme,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/backup btrfs subvol=@srv_nvme_backup,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/michael btrfs subvol=@srv_nvme_michael,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/container-server btrfs subvol=@srv_nvme_container-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/infra-server btrfs subvol=@srv_nvme_infra-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/nextcloud-server btrfs subvol=@srv_nvme_nextcloud-server,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/iso btrfs subvol=@srv_nvme_iso,noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "UUID=19583b5d-8c79-4f16-b902-153124679f5e /srv/nvme/btrfsroot btrfs noatime,nodev,nosuid,noexec,compress=zstd,autodefrag,space_cache=v2,ssd 0 0"
        - "/srv/nvme/backup /srv/nfs/backup none bind 0 0"
        - "/srv/nvme/iso /srv/nfs/iso none bind 0 0"
        - "/srv/nvme/michael /srv/smb/michael none bind 0 0"
        - "/srv/nvme/infra-server /srv/nfs/infra-server none bind 0 0"
        - "/srv/nvme/container-server /srv/nfs/container-server none bind 0 0"
        - "/srv/nvme/nextcloud-server /srv/nfs/nextcloud-server none bind 0 0"
               
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - samba
          - smbclient
          - python3-samba
          - cifs-utils
          - htop
          - iotop
          - strace
          - lsof
          - mc
          - auditd
          - apparmor-utils
          - apparmor-profiles
          - nfs-kernel-server
          - btrfs-progs
          - firewalld
          - git
          - rsync
          - fastfetch
          - lynis          
        state: present
        update_cache: yes

    - name: Ensure Firewalld is running and enabled
      ansible.builtin.systemd:
        name: firewalld
        enabled: yes
        state: started

    - name: Check existing Firewalld zones
      ansible.builtin.command: "firewall-cmd --get-zones"
      register: firewalld_existing_zones
      changed_when: false

    - name: Create Firewalld zones if missing
      ansible.builtin.firewalld:
        zone: "{{ item }}"
        permanent: yes
        state: present
      loop:
        - servers
        - 10G
        - nfs
        - smb
      when: "item not in firewalld_existing_zones.stdout"

    - name: Reload Firewalld to apply new zones
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"
      changed_when: false 
       
    - name: Bind interfaces to Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        interface: "{{ item.interface }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", interface: "eth0" }
        - { zone: "10G", interface: "eth1" }
        - { zone: "nfs", interface: "eth2" }
        - { zone: "smb", interface: "eth3" }
        
    - name: Allow required services in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        service: "{{ item.service }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", service: "ssh" }
        - { zone: "servers", service: "samba" }
        - { zone: "10G", service: "samba" }
        - { zone: "nfs", service: "nfs" }
        - { zone: "nfs", service: "mountd" }
        - { zone: "nfs", service: "rpc-bind" }
        - { zone: "smb", service: "samba" }
        
    - name: Open required ports in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        port: "{{ item.port }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "nfs", port: "32767/tcp" }
        - { zone: "nfs", port: "32767/udp" }
        - { zone: "nfs", port: "32765/tcp" }
        - { zone: "nfs", port: "32765/udp" }
        
    - name: Reload Firewalld to apply changes
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"

    - name: Set michaelâ€™s Linux password
      ansible.builtin.user:
        name: michael
        password: "{{ michael_password | password_hash('sha512') }}"

    - name: Check if SSH private key exists for user michael
      ansible.builtin.stat:
        path: /home/michael/.ssh/id_rsa
      register: michael_ssh_key

    - name: Create .ssh directory for michael (if needed)
      file:
        path: /home/michael/.ssh
        state: directory
        owner: michael
        group: michael
        mode: '0700'

    - name: Generate SSH key for michael if it doesn't exist
      become_user: michael
      community.crypto.openssh_keypair:
        path: /home/michael/.ssh/id_rsa
        type: rsa
        size: 4096
        passphrase: "{{ ssh_key_passphrase }}"
        comment: "michael@{{ inventory_hostname }}"
      when: not michael_ssh_key.stat.exists

    - name: Read public SSH key
      slurp:
        src: /home/michael/.ssh/id_rsa.pub
      register: michael_public_key
      become_user: michael

    - name: Create /home/michael/build directory with proper ownership
      file:
        path: /home/michael/build
        state: directory
        owner: michael
        group: michael
        mode: '0755'

    - name: Ensure aliases are present in .bashrc for root and michael
      ansible.builtin.lineinfile:
        path: "{{ item.bashrc }}"
        line: "{{ item.alias }}"
        create: yes
        owner: "{{ item.user }}"
        group: "{{ item.user }}"
        mode: '0644'
        insertafter: EOF
      loop:
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias gs='git status'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias c='clear'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias h='history'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias ls='ls -alh --color=auto" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias df='df -h'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias ports='ss -tulpn''" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias gs='git status'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias c='clear'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias h='history'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias ls='ls -alh --color=auto'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias df='df -h'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias ports='ss -tulpn'" }
    
    - name: Ensure NFS service is running and enabled
      ansible.builtin.systemd:
        name: nfs-server
        enabled: yes
        state: started

    - name: Define NFS exports
      ansible.builtin.blockinfile:
        path: /etc/exports
        block: |
          /srv/nfs 10.12.112.50(rw,fsid=0,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }}) 10.12.112.55(rw,fsid=0,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }})
          /srv/nfs/iso 10.12.112.10(rw,fsid=1,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }}) 10.12.112.11(rw,fsid=1,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }})
          /srv/nfs/backup 10.12.112.0/24(rw,fsid=2,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }})
          /srv/nfs/infra-server/pihole-clients 10.12.112.30(rw,fsid=3,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }})
          /srv/nfs/infra-server/compose 10.12.112.30(rw,fsid=4,all_squash,anonuid={{ nobody_uid }},anongid={{ nobody_gid }})  
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
      notify: Restart NFS

    - name: Add Nobody-User in [Mapping]
      ansible.builtin.ini_file:
        path: /etc/idmapd.conf
        section: Mapping
        option: Nobody-User
        value: nobody
        backup: yes

    - name: Add Nobody-Group in [Mapping]
      ansible.builtin.ini_file:
        path: /etc/idmapd.conf
        section: Mapping
        option: Nobody-Group
        value: nobody
        backup: yes

    - name: Export NFS shares
      ansible.builtin.command: exportfs -ra
      changed_when: false

    - name: Set fixed ports for NFS services in /etc/nfs.conf
      ansible.builtin.blockinfile:
        path: /etc/nfs.conf
        marker: "# {mark} ANSIBLE MANAGED NFS PORTS"
        block: |
          [mountd]
          port=20048

          [lockd]
          port=32767
          udp-port=32767

          [statd]
          port=32765
          udp-port=32765
      notify: Restart NFS

    - name: Ensure michael is in the sambashare group
      ansible.builtin.user:
        name: michael
        groups: sambashare
        append: yes

    - name: Create Samba users for each share
      ansible.builtin.shell: |
        echo -e "{{ lookup('vars', item + '_smb_password') }}\n{{ lookup('vars', item + '_smb_password') }}" \
          | smbpasswd -s -a {{ item }}
      args:
        executable: /bin/bash
      loop:
        - michael

    - name: Ensure share directories have correct owner/group and mode
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
        recurse: no
      loop:
        - { path: "/srv/smb/michael",       owner: michael,  group: michael,  mode: "2770" }
        
    - name: Deploy custom smb.conf
      ansible.builtin.template:
        src: file_server_smb.conf.j2
        dest: /etc/samba/smb.conf
        owner: root
        group: root
        mode: '0644'
      notify: Restart Samba

    - name: Display public SSH key for michael
      debug:
        msg: "{{ michael_public_key.content | b64decode }}"  

  handlers:
    
    - name: Restart NFS
      ansible.builtin.systemd:
        name: nfs-server
        state: restarted

    - name: Restart Samba
      ansible.builtin.systemd:
        name: smbd
        state: restarted
        enabled: yes



