- name: Install infra-server
  hosts: infra_server
  become: yes
  
  vars_files:

    - group_vars/infra_server/secrets.yml
    - group_vars/infra_server/common.yml

  tasks:

    - name: Set michael’s Linux password
      ansible.builtin.user:
        name: michael
        password: "{{ michael_password | password_hash('sha512') }}"

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - htop
          - iotop
          - strace
          - lsof
          - mc
          - firewalld
          - nfs-common
          - libnfsidmap1 
          - podman
          - podman-docker
          - auditd
          - apparmor-utils
          - apparmor-profiles
          - jq
          - unbound
          - bind9-dnsutils        
        state: present
        update_cache: yes

    - name: Ensure Firewalld is running and enabled
      ansible.builtin.systemd:
        name: firewalld
        enabled: yes
        state: started

    - name: Check existing Firewalld zones
      ansible.builtin.command: "firewall-cmd --get-zones"
      register: firewalld_existing_zones
      changed_when: false

    - name: Create Firewalld zones if missing
      ansible.builtin.firewalld:
        zone: "{{ item }}"
        permanent: yes
        state: present
      loop:
        - servers
        - 10G
        - nfs
        - containers
      when: "item not in firewalld_existing_zones.stdout"

    - name: Reload Firewalld to apply new zones
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"
      changed_when: false 
       
    - name: Bind interfaces to Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        interface: "{{ item.interface }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", interface: "eth0" }
        - { zone: "10G", interface: "eth1" }
        - { zone: "nfs", interface: "eth3" }
        - { zone: "containers", interface: "eth2" }
        
    - name: Allow required services in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        service: "{{ item.service }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "servers", service: "http" }
        - { zone: "servers", service: "https" }
        - { zone: "servers", service: "ssh" }
        - { zone: "servers", service: "dns" }
        - { zone: "servers", service: "dhcp" }
        - { zone: "servers", service: "ntp" }
        - { zone: "10G", service: "http" }
        - { zone: "10G", service: "https" }
        - { zone: "10G", service: "dns" }
        - { zone: "10G", service: "dhcp" }
        - { zone: "10G", service: "ntp" }
        
    - name: Open required ports in Firewalld zones
      ansible.builtin.firewalld:
        zone: "{{ item.zone }}"
        port: "{{ item.port }}"
        permanent: yes
        immediate: yes
        state: enabled
      loop:
        - { zone: "containers", port: "8080/tcp" }
        - { zone: "containers", port: "8081/tcp" }
        - { zone: "containers", port: "8082/tcp" }
        - { zone: "containers", port: "8083/tcp" }

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      
    - name: Redirect common ports for rootless podman (rich rules)
      ansible.posix.firewalld:
        zone: "{{ item.zone }}"
        rich_rule: 'rule family="ipv4" forward-port port="{{ item.src_port }}" protocol="{{ item.protocol }}" to-port="{{ item.to_port }}"'
        permanent: yes
        immediate: yes
        state: enabled  
      loop:
        - { zone: "servers",    src_port: 8080, protocol: "tcp", to_port: 80 }        
        - { zone: "servers",    src_port: 8443, protocol: "tcp", to_port: 443 }
        - { zone: "servers", src_port: 53,  protocol: "tcp", to_port: 8053 }
        - { zone: "servers", src_port: 53,  protocol: "udp", to_port: 8053 }
        - { zone: "servers", src_port: 67,  protocol: "tcp", to_port: 8067 }
        - { zone: "servers", src_port: 67,  protocol: "udp", to_port: 8067 }
        - { zone: "servers", src_port: 123, protocol: "udp", to_port: 8123 }
        - { zone: "10G",    src_port: 8080, protocol: "tcp", to_port: 80 }        
        - { zone: "10G",    src_port: 8443, protocol: "tcp", to_port: 443 }
        - { zone: "10G",    src_port: 53,  protocol: "tcp", to_port: 8053 }
        - { zone: "10G",    src_port: 53,  protocol: "udp", to_port: 8053 }
        - { zone: "10G",    src_port: 67,  protocol: "tcp", to_port: 8067 }
        - { zone: "10G",    src_port: 67,  protocol: "udp", to_port: 8067 }
        - { zone: "10G",    src_port: 123, protocol: "udp", to_port: 8123 }        

    - name: Reload Firewalld to apply changes
      ansible.builtin.command:
        cmd: "firewall-cmd --reload"

    - name: Ensure user 'podman' exists with a specific password
      ansible.builtin.user:
        name: podman
        shell: /bin/bash
        home: /home/podman
        
    - name: Set podman’s Linux password
      ansible.builtin.user:
        name: podman
        password: "{{ podman_password | password_hash('sha512') }}"
        
    - name: Ensure podman has authorized SSH key
      ansible.posix.authorized_key:
        user: podman
        state: present
        key: "{{ podman_ssh_pubkey }}"

    - name: Get podman user's UID
      command: id -u podman
      register: podman_uid_cmd
      changed_when: false

    - name: Set podman_uid fact
      set_fact:
        podman_uid: "{{ podman_uid_cmd.stdout }}"

    - name: Get podman user's GID
      ansible.builtin.command:
        cmd: "id -g podman"
      register: podman_gid_cmd
      changed_when: false

    - name: Set podman_gid fact
      ansible.builtin.set_fact:
        podman_gid: "{{ podman_gid_cmd.stdout }}"

    - name: Enable linger for podman user so socket survives reboot
      command: loginctl enable-linger podman

    - name: Ensure podman.socket is enabled and running for podman user
      ansible.builtin.command: >
        sudo -u podman env XDG_RUNTIME_DIR=/run/user/{{ podman_uid }}
        systemctl --user enable --now podman.socket

    - name: Ensure podman's bashrc exports DOCKER_HOST
      lineinfile:
        path: /home/podman/.bashrc
        line: 'export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock'
        create: yes
        owner: podman
        group: podman
        mode: '0644'

    - name: Create directory for compose files
      file:
        path: /home/podman/compose
        state: directory
        mode: '0755'

    - name: Create directory for persistent podman data
      file:
        path: /home/podman/data
        state: directory
        mode: '0755'

    - name: Get podman user's UID
      command: id -u podman
      register: podman_uid_cmd
      changed_when: false

    - name: Set podman_uid fact
      set_fact:
        podman_uid: "{{ podman_uid_cmd.stdout }}"

    - name: Get podman user's GID
      ansible.builtin.command:
        cmd: "id -g podman"
      register: podman_gid_cmd
      changed_when: false

    - name: Set podman_gid fact
      ansible.builtin.set_fact:
        podman_gid: "{{ podman_gid_cmd.stdout }}"

    - name: Ensure aliases are present in .bashrc for root, podman and michael
      ansible.builtin.lineinfile:
        path: "{{ item.bashrc }}"
        line: "{{ item.alias }}"
        create: yes
        owner: "{{ item.user }}"
        group: "{{ item.user }}"
        mode: '0644'
        insertafter: EOF
      loop:
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias gs='git status'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias c='clear'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias h='history'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias ls='ls -alh --color=auto'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias df='df -h'" }
        - { user: 'root', bashrc: '/root/.bashrc', alias: "alias ports='ss -tulpn'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias gs='git status'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias c='clear'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias h='history'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias ls='ls -alh --color=auto'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias df='df -h'" }
        - { user: 'michael', bashrc: '/home/michael/.bashrc', alias: "alias ports='ss -tulpn'" }
        - { user: 'podman', bashrc: '/home/podman/.bashrc', alias: "alias gs='git status'" }
        - { user: 'podman', bashrc: '/home/podman/.bashrc', alias: "alias c='clear'" }
        - { user: 'podman', bashrc: '/home/podman/.bashrc', alias: "alias h='history'" }
        - { user: 'podman', bashrc: '/home/podman/.bashrc', alias: "alias ls='ls -alh --color=auto'" }
        - { user: 'podman', bashrc: '/home/podman/.bashrc', alias: "alias df='df -h'" }
        - { user: 'podman', bashrc: '/home/podman/.bashrc', alias: "alias ports='ss -tulpn'" }

    - name: Make fastfetch run for every interactive shell
      become: true
      ansible.builtin.copy:
        dest: /etc/profile.d/fastfetch.sh
        owner: root
        group: root
        mode: '0755'
        content: |
          #!/bin/sh
          # only run in an interactive terminal
          if [ -t 1 ] && command -v fastfetch >/dev/null 2>&1; then
            fastfetch
          fi

    - name: Fetch latest Docker Compose release via GitHub API
      uri:
        url: https://api.github.com/repos/docker/compose/releases/latest
        return_content: yes
        status_code: 200
      register: compose_release
      retries: 3
      delay: 5
      until: compose_release.status == 200

    - name: Determine Docker Compose version (fallback if API fails)
      set_fact:
        compose_version: >-
          {{ compose_release.json.tag_name
             if (compose_release.json is defined and compose_release.json.tag_name is defined)
             else 'v2.18.1' }}\

    - name: Deploy unbound config file
      ansible.builtin.template:
          src: infra_server_pihole_unbound.conf.j2
          dest: /etc/unbound/unbound.conf.d/pi-hole.conf
          owner: root
          group: root
          mode: '0644'

    - name: Deploy compose file
      ansible.builtin.template:
          src: infra_server_compose.yml.j2
          dest: /home/podman/compose/compose.yml
          owner: podman
          group: podman
          mode: '0644'

    - name: Reboot the server
      ansible.builtin.reboot:
        reboot_timeout: 600     # wait up to 10 minutes for reboot
        test_command: whoami    # command to verify SSH is back
      tags: reboot

    - name: Reset SSH connection after reboot
      meta: reset_connection
      tags: reboot

  handlers:

    - name: Controleer docker-compose
      command: docker-compose version
      register: compose_check
      changed_when: false
      failed_when: compose_check.rc != 0


